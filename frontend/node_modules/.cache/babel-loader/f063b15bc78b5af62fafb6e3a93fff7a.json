{"ast":null,"code":"'use strict';\n/**\r\n * StripeError is the base error from which all other more specific Stripe errors derive.\r\n * Specifically for errors returned from Stripe's REST API.\r\n */\n\nclass StripeError extends Error {\n  constructor(raw = {}) {\n    super(raw.message);\n    this.type = this.constructor.name;\n    this.raw = raw;\n    this.rawType = raw.type;\n    this.code = raw.code;\n    this.doc_url = raw.doc_url;\n    this.param = raw.param;\n    this.detail = raw.detail;\n    this.headers = raw.headers;\n    this.requestId = raw.requestId;\n    this.statusCode = raw.statusCode;\n    this.message = raw.message;\n    this.charge = raw.charge;\n    this.decline_code = raw.decline_code;\n    this.payment_intent = raw.payment_intent;\n    this.payment_method = raw.payment_method;\n    this.payment_method_type = raw.payment_method_type;\n    this.setup_intent = raw.setup_intent;\n    this.source = raw.source;\n  }\n  /**\r\n   * Helper factory which takes raw stripe errors and outputs wrapping instances\r\n   */\n\n\n  static generate(rawStripeError) {\n    switch (rawStripeError.type) {\n      case 'card_error':\n        return new StripeCardError(rawStripeError);\n\n      case 'invalid_request_error':\n        return new StripeInvalidRequestError(rawStripeError);\n\n      case 'api_error':\n        return new StripeAPIError(rawStripeError);\n\n      case 'authentication_error':\n        return new StripeAuthenticationError(rawStripeError);\n\n      case 'rate_limit_error':\n        return new StripeRateLimitError(rawStripeError);\n\n      case 'idempotency_error':\n        return new StripeIdempotencyError(rawStripeError);\n\n      case 'invalid_grant':\n        return new StripeInvalidGrantError(rawStripeError);\n\n      default:\n        return new GenericError('Generic', 'Unknown Error');\n    }\n  }\n\n} // Specific Stripe Error types:\n\n/**\r\n * CardError is raised when a user enters a card that can't be charged for\r\n * some reason.\r\n */\n\n\nclass StripeCardError extends StripeError {}\n/**\r\n * InvalidRequestError is raised when a request is initiated with invalid\r\n * parameters.\r\n */\n\n\nclass StripeInvalidRequestError extends StripeError {}\n/**\r\n * APIError is a generic error that may be raised in cases where none of the\r\n * other named errors cover the problem. It could also be raised in the case\r\n * that a new error has been introduced in the API, but this version of the\r\n * Node.JS SDK doesn't know how to handle it.\r\n */\n\n\nclass StripeAPIError extends StripeError {}\n/**\r\n * AuthenticationError is raised when invalid credentials are used to connect\r\n * to Stripe's servers.\r\n */\n\n\nclass StripeAuthenticationError extends StripeError {}\n/**\r\n * PermissionError is raised in cases where access was attempted on a resource\r\n * that wasn't allowed.\r\n */\n\n\nclass StripePermissionError extends StripeError {}\n/**\r\n * RateLimitError is raised in cases where an account is putting too much load\r\n * on Stripe's API servers (usually by performing too many requests). Please\r\n * back off on request rate.\r\n */\n\n\nclass StripeRateLimitError extends StripeError {}\n/**\r\n * StripeConnectionError is raised in the event that the SDK can't connect to\r\n * Stripe's servers. That can be for a variety of different reasons from a\r\n * downed network to a bad TLS certificate.\r\n */\n\n\nclass StripeConnectionError extends StripeError {}\n/**\r\n * SignatureVerificationError is raised when the signature verification for a\r\n * webhook fails\r\n */\n\n\nclass StripeSignatureVerificationError extends StripeError {}\n/**\r\n * IdempotencyError is raised in cases where an idempotency key was used\r\n * improperly.\r\n */\n\n\nclass StripeIdempotencyError extends StripeError {}\n/**\r\n * InvalidGrantError is raised when a specified code doesn't exist, is\r\n * expired, has been used, or doesn't belong to you; a refresh token doesn't\r\n * exist, or doesn't belong to you; or if an API key's mode (live or test)\r\n * doesn't match the mode of a code or refresh token.\r\n */\n\n\nclass StripeInvalidGrantError extends StripeError {}\n\nmodule.exports.generate = StripeError.generate;\nmodule.exports.StripeError = StripeError;\nmodule.exports.StripeCardError = StripeCardError;\nmodule.exports.StripeInvalidRequestError = StripeInvalidRequestError;\nmodule.exports.StripeAPIError = StripeAPIError;\nmodule.exports.StripeAuthenticationError = StripeAuthenticationError;\nmodule.exports.StripePermissionError = StripePermissionError;\nmodule.exports.StripeRateLimitError = StripeRateLimitError;\nmodule.exports.StripeConnectionError = StripeConnectionError;\nmodule.exports.StripeSignatureVerificationError = StripeSignatureVerificationError;\nmodule.exports.StripeIdempotencyError = StripeIdempotencyError;\nmodule.exports.StripeInvalidGrantError = StripeInvalidGrantError;","map":{"version":3,"sources":["D:/Abid/checkout-task/frontend/node_modules/stripe/lib/Error.js"],"names":["StripeError","Error","constructor","raw","message","type","name","rawType","code","doc_url","param","detail","headers","requestId","statusCode","charge","decline_code","payment_intent","payment_method","payment_method_type","setup_intent","source","generate","rawStripeError","StripeCardError","StripeInvalidRequestError","StripeAPIError","StripeAuthenticationError","StripeRateLimitError","StripeIdempotencyError","StripeInvalidGrantError","GenericError","StripePermissionError","StripeConnectionError","StripeSignatureVerificationError","module","exports"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\n/**\r\n * StripeError is the base error from which all other more specific Stripe errors derive.\r\n * Specifically for errors returned from Stripe's REST API.\r\n */\r\nclass StripeError extends Error {\r\n  constructor(raw = {}) {\r\n    super(raw.message);\r\n    this.type = this.constructor.name;\r\n\r\n    this.raw = raw;\r\n    this.rawType = raw.type;\r\n    this.code = raw.code;\r\n    this.doc_url = raw.doc_url;\r\n    this.param = raw.param;\r\n    this.detail = raw.detail;\r\n    this.headers = raw.headers;\r\n    this.requestId = raw.requestId;\r\n    this.statusCode = raw.statusCode;\r\n    this.message = raw.message;\r\n\r\n    this.charge = raw.charge;\r\n    this.decline_code = raw.decline_code;\r\n    this.payment_intent = raw.payment_intent;\r\n    this.payment_method = raw.payment_method;\r\n    this.payment_method_type = raw.payment_method_type;\r\n    this.setup_intent = raw.setup_intent;\r\n    this.source = raw.source;\r\n  }\r\n\r\n  /**\r\n   * Helper factory which takes raw stripe errors and outputs wrapping instances\r\n   */\r\n  static generate(rawStripeError) {\r\n    switch (rawStripeError.type) {\r\n      case 'card_error':\r\n        return new StripeCardError(rawStripeError);\r\n      case 'invalid_request_error':\r\n        return new StripeInvalidRequestError(rawStripeError);\r\n      case 'api_error':\r\n        return new StripeAPIError(rawStripeError);\r\n      case 'authentication_error':\r\n        return new StripeAuthenticationError(rawStripeError);\r\n      case 'rate_limit_error':\r\n        return new StripeRateLimitError(rawStripeError);\r\n      case 'idempotency_error':\r\n        return new StripeIdempotencyError(rawStripeError);\r\n      case 'invalid_grant':\r\n        return new StripeInvalidGrantError(rawStripeError);\r\n      default:\r\n        return new GenericError('Generic', 'Unknown Error');\r\n    }\r\n  }\r\n}\r\n\r\n// Specific Stripe Error types:\r\n\r\n/**\r\n * CardError is raised when a user enters a card that can't be charged for\r\n * some reason.\r\n */\r\nclass StripeCardError extends StripeError {}\r\n\r\n/**\r\n * InvalidRequestError is raised when a request is initiated with invalid\r\n * parameters.\r\n */\r\nclass StripeInvalidRequestError extends StripeError {}\r\n\r\n/**\r\n * APIError is a generic error that may be raised in cases where none of the\r\n * other named errors cover the problem. It could also be raised in the case\r\n * that a new error has been introduced in the API, but this version of the\r\n * Node.JS SDK doesn't know how to handle it.\r\n */\r\nclass StripeAPIError extends StripeError {}\r\n\r\n/**\r\n * AuthenticationError is raised when invalid credentials are used to connect\r\n * to Stripe's servers.\r\n */\r\nclass StripeAuthenticationError extends StripeError {}\r\n\r\n/**\r\n * PermissionError is raised in cases where access was attempted on a resource\r\n * that wasn't allowed.\r\n */\r\nclass StripePermissionError extends StripeError {}\r\n\r\n/**\r\n * RateLimitError is raised in cases where an account is putting too much load\r\n * on Stripe's API servers (usually by performing too many requests). Please\r\n * back off on request rate.\r\n */\r\nclass StripeRateLimitError extends StripeError {}\r\n\r\n/**\r\n * StripeConnectionError is raised in the event that the SDK can't connect to\r\n * Stripe's servers. That can be for a variety of different reasons from a\r\n * downed network to a bad TLS certificate.\r\n */\r\nclass StripeConnectionError extends StripeError {}\r\n\r\n/**\r\n * SignatureVerificationError is raised when the signature verification for a\r\n * webhook fails\r\n */\r\nclass StripeSignatureVerificationError extends StripeError {}\r\n\r\n/**\r\n * IdempotencyError is raised in cases where an idempotency key was used\r\n * improperly.\r\n */\r\nclass StripeIdempotencyError extends StripeError {}\r\n\r\n/**\r\n * InvalidGrantError is raised when a specified code doesn't exist, is\r\n * expired, has been used, or doesn't belong to you; a refresh token doesn't\r\n * exist, or doesn't belong to you; or if an API key's mode (live or test)\r\n * doesn't match the mode of a code or refresh token.\r\n */\r\nclass StripeInvalidGrantError extends StripeError {}\r\n\r\nmodule.exports.generate = StripeError.generate;\r\nmodule.exports.StripeError = StripeError;\r\nmodule.exports.StripeCardError = StripeCardError;\r\nmodule.exports.StripeInvalidRequestError = StripeInvalidRequestError;\r\nmodule.exports.StripeAPIError = StripeAPIError;\r\nmodule.exports.StripeAuthenticationError = StripeAuthenticationError;\r\nmodule.exports.StripePermissionError = StripePermissionError;\r\nmodule.exports.StripeRateLimitError = StripeRateLimitError;\r\nmodule.exports.StripeConnectionError = StripeConnectionError;\r\nmodule.exports.StripeSignatureVerificationError = StripeSignatureVerificationError;\r\nmodule.exports.StripeIdempotencyError = StripeIdempotencyError;\r\nmodule.exports.StripeInvalidGrantError = StripeInvalidGrantError;\r\n"]},"metadata":{},"sourceType":"script"}