{"ast":null,"code":"'use strict';\n\nconst utils = require('./utils');\n\nconst {\n  StripeError\n} = require('./Error');\n\nclass StreamProcessingError extends StripeError {} // Method for formatting HTTP body for the multipart/form-data specification\n// Mostly taken from Fermata.js\n// https://github.com/natevw/fermata/blob/5d9732a33d776ce925013a265935facd1626cc88/fermata.js#L315-L343\n\n\nconst multipartDataGenerator = (method, data, headers) => {\n  const segno = (Math.round(Math.random() * 1e16) + Math.round(Math.random() * 1e16)).toString();\n  headers['Content-Type'] = `multipart/form-data; boundary=${segno}`;\n  let buffer = Buffer.alloc(0);\n\n  function push(l) {\n    const prevBuffer = buffer;\n    const newBuffer = l instanceof Buffer ? l : Buffer.from(l);\n    buffer = Buffer.alloc(prevBuffer.length + newBuffer.length + 2);\n    prevBuffer.copy(buffer);\n    newBuffer.copy(buffer, prevBuffer.length);\n    buffer.write('\\r\\n', buffer.length - 2);\n  }\n\n  function q(s) {\n    return `\"${s.replace(/\"|\"/g, '%22').replace(/\\r\\n|\\r|\\n/g, ' ')}\"`;\n  }\n\n  const flattenedData = utils.flattenAndStringify(data);\n\n  for (const k in flattenedData) {\n    const v = flattenedData[k];\n    push(`--${segno}`);\n\n    if (v.hasOwnProperty('data')) {\n      push(`Content-Disposition: form-data; name=${q(k)}; filename=${q(v.name || 'blob')}`);\n      push(`Content-Type: ${v.type || 'application/octet-stream'}`);\n      push('');\n      push(v.data);\n    } else {\n      push(`Content-Disposition: form-data; name=${q(k)}`);\n      push('');\n      push(v);\n    }\n  }\n\n  push(`--${segno}--`);\n  return buffer;\n};\n\nconst streamProcessor = (method, data, headers, callback) => {\n  const bufferArray = [];\n  data.file.data.on('data', line => {\n    bufferArray.push(line);\n  }).once('end', () => {\n    const bufferData = Object.assign({}, data);\n    bufferData.file.data = Buffer.concat(bufferArray);\n    const buffer = multipartDataGenerator(method, bufferData, headers);\n    callback(null, buffer);\n  }).on('error', err => {\n    callback(new StreamProcessingError({\n      message: 'An error occurred while attempting to process the file for upload.',\n      detail: err\n    }), null);\n  });\n};\n\nconst multipartRequestDataProcessor = (method, data, headers, callback) => {\n  data = data || {};\n\n  if (method !== 'POST') {\n    return callback(null, utils.stringifyRequestData(data));\n  }\n\n  const isStream = utils.checkForStream(data);\n\n  if (isStream) {\n    return streamProcessor(method, data, headers, callback);\n  }\n\n  const buffer = multipartDataGenerator(method, data, headers);\n  return callback(null, buffer);\n};\n\nmodule.exports.multipartRequestDataProcessor = multipartRequestDataProcessor;","map":{"version":3,"sources":["D:/Abid/checkout-task/frontend/node_modules/stripe/lib/multipart.js"],"names":["utils","require","StripeError","StreamProcessingError","multipartDataGenerator","method","data","headers","segno","Math","round","random","toString","buffer","Buffer","alloc","push","l","prevBuffer","newBuffer","from","length","copy","write","q","s","replace","flattenedData","flattenAndStringify","k","v","hasOwnProperty","name","type","streamProcessor","callback","bufferArray","file","on","line","once","bufferData","Object","assign","concat","err","message","detail","multipartRequestDataProcessor","stringifyRequestData","isStream","checkForStream","module","exports"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nconst utils = require('./utils');\r\nconst {StripeError} = require('./Error');\r\n\r\nclass StreamProcessingError extends StripeError {}\r\n\r\n// Method for formatting HTTP body for the multipart/form-data specification\r\n// Mostly taken from Fermata.js\r\n// https://github.com/natevw/fermata/blob/5d9732a33d776ce925013a265935facd1626cc88/fermata.js#L315-L343\r\nconst multipartDataGenerator = (method, data, headers) => {\r\n  const segno = (\r\n    Math.round(Math.random() * 1e16) + Math.round(Math.random() * 1e16)\r\n  ).toString();\r\n  headers['Content-Type'] = `multipart/form-data; boundary=${segno}`;\r\n  let buffer = Buffer.alloc(0);\r\n\r\n  function push(l) {\r\n    const prevBuffer = buffer;\r\n    const newBuffer = l instanceof Buffer ? l : Buffer.from(l);\r\n    buffer = Buffer.alloc(prevBuffer.length + newBuffer.length + 2);\r\n    prevBuffer.copy(buffer);\r\n    newBuffer.copy(buffer, prevBuffer.length);\r\n    buffer.write('\\r\\n', buffer.length - 2);\r\n  }\r\n\r\n  function q(s) {\r\n    return `\"${s.replace(/\"|\"/g, '%22').replace(/\\r\\n|\\r|\\n/g, ' ')}\"`;\r\n  }\r\n\r\n  const flattenedData = utils.flattenAndStringify(data);\r\n\r\n  for (const k in flattenedData) {\r\n    const v = flattenedData[k];\r\n    push(`--${segno}`);\r\n    if (v.hasOwnProperty('data')) {\r\n      push(\r\n        `Content-Disposition: form-data; name=${q(k)}; filename=${q(\r\n          v.name || 'blob'\r\n        )}`\r\n      );\r\n      push(`Content-Type: ${v.type || 'application/octet-stream'}`);\r\n      push('');\r\n      push(v.data);\r\n    } else {\r\n      push(`Content-Disposition: form-data; name=${q(k)}`);\r\n      push('');\r\n      push(v);\r\n    }\r\n  }\r\n  push(`--${segno}--`);\r\n\r\n  return buffer;\r\n};\r\n\r\nconst streamProcessor = (method, data, headers, callback) => {\r\n  const bufferArray = [];\r\n  data.file.data\r\n    .on('data', (line) => {\r\n      bufferArray.push(line);\r\n    })\r\n    .once('end', () => {\r\n      const bufferData = Object.assign({}, data);\r\n      bufferData.file.data = Buffer.concat(bufferArray);\r\n      const buffer = multipartDataGenerator(method, bufferData, headers);\r\n      callback(null, buffer);\r\n    })\r\n    .on('error', (err) => {\r\n      callback(\r\n        new StreamProcessingError({\r\n          message:\r\n            'An error occurred while attempting to process the file for upload.',\r\n          detail: err,\r\n        }),\r\n        null\r\n      );\r\n    });\r\n};\r\n\r\nconst multipartRequestDataProcessor = (method, data, headers, callback) => {\r\n  data = data || {};\r\n\r\n  if (method !== 'POST') {\r\n    return callback(null, utils.stringifyRequestData(data));\r\n  }\r\n\r\n  const isStream = utils.checkForStream(data);\r\n  if (isStream) {\r\n    return streamProcessor(method, data, headers, callback);\r\n  }\r\n\r\n  const buffer = multipartDataGenerator(method, data, headers);\r\n  return callback(null, buffer);\r\n};\r\n\r\nmodule.exports.multipartRequestDataProcessor = multipartRequestDataProcessor;\r\n"]},"metadata":{},"sourceType":"script"}