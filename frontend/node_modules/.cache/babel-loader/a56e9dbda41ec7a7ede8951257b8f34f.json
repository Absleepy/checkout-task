{"ast":null,"code":"'use strict';\n\nconst utils = require('./utils');\n\nconst {\n  StripeError,\n  StripeSignatureVerificationError\n} = require('./Error');\n\nconst Webhook = {\n  DEFAULT_TOLERANCE: 300,\n\n  // 5 minutes\n  constructEvent(payload, header, secret, tolerance, cryptoProvider) {\n    this.signature.verifyHeader(payload, header, secret, tolerance || Webhook.DEFAULT_TOLERANCE, cryptoProvider);\n    const jsonPayload = JSON.parse(payload);\n    return jsonPayload;\n  },\n\n  /**\r\n   * Generates a header to be used for webhook mocking\r\n   *\r\n   * @typedef {object} opts\r\n   * @property {number} timestamp - Timestamp of the header. Defaults to Date.now()\r\n   * @property {string} payload - JSON stringified payload object, containing the 'id' and 'object' parameters\r\n   * @property {string} secret - Stripe webhook secret 'whsec_...'\r\n   * @property {string} scheme - Version of API to hit. Defaults to 'v1'.\r\n   * @property {string} signature - Computed webhook signature\r\n   * @property {CryptoProvider} cryptoProvider - Crypto provider to use for computing the signature if none was provided. Defaults to NodeCryptoProvider.\r\n   */\n  generateTestHeaderString: function (opts) {\n    if (!opts) {\n      throw new StripeError({\n        message: 'Options are required'\n      });\n    }\n\n    opts.timestamp = Math.floor(opts.timestamp) || Math.floor(Date.now() / 1000);\n    opts.scheme = opts.scheme || signature.EXPECTED_SCHEME;\n    opts.cryptoProvider = opts.cryptoProvider || getNodeCryptoProvider();\n    opts.signature = opts.signature || opts.cryptoProvider.computeHMACSignature(opts.timestamp + '.' + opts.payload, opts.secret);\n    const generatedHeader = ['t=' + opts.timestamp, opts.scheme + '=' + opts.signature].join(',');\n    return generatedHeader;\n  }\n};\nconst signature = {\n  EXPECTED_SCHEME: 'v1',\n\n  verifyHeader(payload, header, secret, tolerance, cryptoProvider) {\n    payload = Buffer.isBuffer(payload) ? payload.toString('utf8') : payload; // Express's type for `Request#headers` is `string | []string`\n    // which is because the `set-cookie` header is an array,\n    // but no other headers are an array (docs: https://nodejs.org/api/http.html#http_message_headers)\n    // (Express's Request class is an extension of http.IncomingMessage, and doesn't appear to be relevantly modified: https://github.com/expressjs/express/blob/master/lib/request.js#L31)\n\n    if (Array.isArray(header)) {\n      throw new Error('Unexpected: An array was passed as a header, which should not be possible for the stripe-signature header.');\n    }\n\n    header = Buffer.isBuffer(header) ? header.toString('utf8') : header;\n    const details = parseHeader(header, this.EXPECTED_SCHEME);\n\n    if (!details || details.timestamp === -1) {\n      throw new StripeSignatureVerificationError({\n        message: 'Unable to extract timestamp and signatures from header',\n        detail: {\n          header,\n          payload\n        }\n      });\n    }\n\n    if (!details.signatures.length) {\n      throw new StripeSignatureVerificationError({\n        message: 'No signatures found with expected scheme',\n        detail: {\n          header,\n          payload\n        }\n      });\n    }\n\n    cryptoProvider = cryptoProvider || getNodeCryptoProvider();\n    const expectedSignature = cryptoProvider.computeHMACSignature(`${details.timestamp}.${payload}`, secret);\n    const signatureFound = !!details.signatures.filter(utils.secureCompare.bind(utils, expectedSignature)).length;\n\n    if (!signatureFound) {\n      throw new StripeSignatureVerificationError({\n        message: 'No signatures found matching the expected signature for payload.' + ' Are you passing the raw request body you received from Stripe?' + ' https://github.com/stripe/stripe-node#webhook-signing',\n        detail: {\n          header,\n          payload\n        }\n      });\n    }\n\n    const timestampAge = Math.floor(Date.now() / 1000) - details.timestamp;\n\n    if (tolerance > 0 && timestampAge > tolerance) {\n      throw new StripeSignatureVerificationError({\n        message: 'Timestamp outside the tolerance zone',\n        detail: {\n          header,\n          payload\n        }\n      });\n    }\n\n    return true;\n  }\n\n};\n\nfunction parseHeader(header, scheme) {\n  if (typeof header !== 'string') {\n    return null;\n  }\n\n  return header.split(',').reduce((accum, item) => {\n    const kv = item.split('=');\n\n    if (kv[0] === 't') {\n      accum.timestamp = kv[1];\n    }\n\n    if (kv[0] === scheme) {\n      accum.signatures.push(kv[1]);\n    }\n\n    return accum;\n  }, {\n    timestamp: -1,\n    signatures: []\n  });\n}\n\nlet webhooksNodeCryptoProviderInstance = null;\n/**\r\n * Lazily instantiate a NodeCryptoProvider instance. This is a stateless object\r\n * so a singleton can be used here.\r\n */\n\nfunction getNodeCryptoProvider() {\n  if (!webhooksNodeCryptoProviderInstance) {\n    const NodeCryptoProvider = require('./crypto/NodeCryptoProvider');\n\n    webhooksNodeCryptoProviderInstance = new NodeCryptoProvider();\n  }\n\n  return webhooksNodeCryptoProviderInstance;\n}\n\nWebhook.signature = signature;\nmodule.exports = Webhook;","map":{"version":3,"sources":["D:/Abid/checkout-task/frontend/node_modules/stripe/lib/Webhooks.js"],"names":["utils","require","StripeError","StripeSignatureVerificationError","Webhook","DEFAULT_TOLERANCE","constructEvent","payload","header","secret","tolerance","cryptoProvider","signature","verifyHeader","jsonPayload","JSON","parse","generateTestHeaderString","opts","message","timestamp","Math","floor","Date","now","scheme","EXPECTED_SCHEME","getNodeCryptoProvider","computeHMACSignature","generatedHeader","join","Buffer","isBuffer","toString","Array","isArray","Error","details","parseHeader","detail","signatures","length","expectedSignature","signatureFound","filter","secureCompare","bind","timestampAge","split","reduce","accum","item","kv","push","webhooksNodeCryptoProviderInstance","NodeCryptoProvider","module","exports"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nconst utils = require('./utils');\r\nconst {StripeError, StripeSignatureVerificationError} = require('./Error');\r\n\r\nconst Webhook = {\r\n  DEFAULT_TOLERANCE: 300, // 5 minutes\r\n\r\n  constructEvent(payload, header, secret, tolerance, cryptoProvider) {\r\n    this.signature.verifyHeader(\r\n      payload,\r\n      header,\r\n      secret,\r\n      tolerance || Webhook.DEFAULT_TOLERANCE,\r\n      cryptoProvider\r\n    );\r\n\r\n    const jsonPayload = JSON.parse(payload);\r\n    return jsonPayload;\r\n  },\r\n\r\n  /**\r\n   * Generates a header to be used for webhook mocking\r\n   *\r\n   * @typedef {object} opts\r\n   * @property {number} timestamp - Timestamp of the header. Defaults to Date.now()\r\n   * @property {string} payload - JSON stringified payload object, containing the 'id' and 'object' parameters\r\n   * @property {string} secret - Stripe webhook secret 'whsec_...'\r\n   * @property {string} scheme - Version of API to hit. Defaults to 'v1'.\r\n   * @property {string} signature - Computed webhook signature\r\n   * @property {CryptoProvider} cryptoProvider - Crypto provider to use for computing the signature if none was provided. Defaults to NodeCryptoProvider.\r\n   */\r\n  generateTestHeaderString: function(opts) {\r\n    if (!opts) {\r\n      throw new StripeError({\r\n        message: 'Options are required',\r\n      });\r\n    }\r\n\r\n    opts.timestamp =\r\n      Math.floor(opts.timestamp) || Math.floor(Date.now() / 1000);\r\n    opts.scheme = opts.scheme || signature.EXPECTED_SCHEME;\r\n\r\n    opts.cryptoProvider = opts.cryptoProvider || getNodeCryptoProvider();\r\n\r\n    opts.signature =\r\n      opts.signature ||\r\n      opts.cryptoProvider.computeHMACSignature(\r\n        opts.timestamp + '.' + opts.payload,\r\n        opts.secret\r\n      );\r\n\r\n    const generatedHeader = [\r\n      't=' + opts.timestamp,\r\n      opts.scheme + '=' + opts.signature,\r\n    ].join(',');\r\n\r\n    return generatedHeader;\r\n  },\r\n};\r\n\r\nconst signature = {\r\n  EXPECTED_SCHEME: 'v1',\r\n\r\n  verifyHeader(payload, header, secret, tolerance, cryptoProvider) {\r\n    payload = Buffer.isBuffer(payload) ? payload.toString('utf8') : payload;\r\n\r\n    // Express's type for `Request#headers` is `string | []string`\r\n    // which is because the `set-cookie` header is an array,\r\n    // but no other headers are an array (docs: https://nodejs.org/api/http.html#http_message_headers)\r\n    // (Express's Request class is an extension of http.IncomingMessage, and doesn't appear to be relevantly modified: https://github.com/expressjs/express/blob/master/lib/request.js#L31)\r\n    if (Array.isArray(header)) {\r\n      throw new Error(\r\n        'Unexpected: An array was passed as a header, which should not be possible for the stripe-signature header.'\r\n      );\r\n    }\r\n\r\n    header = Buffer.isBuffer(header) ? header.toString('utf8') : header;\r\n\r\n    const details = parseHeader(header, this.EXPECTED_SCHEME);\r\n\r\n    if (!details || details.timestamp === -1) {\r\n      throw new StripeSignatureVerificationError({\r\n        message: 'Unable to extract timestamp and signatures from header',\r\n        detail: {\r\n          header,\r\n          payload,\r\n        },\r\n      });\r\n    }\r\n\r\n    if (!details.signatures.length) {\r\n      throw new StripeSignatureVerificationError({\r\n        message: 'No signatures found with expected scheme',\r\n        detail: {\r\n          header,\r\n          payload,\r\n        },\r\n      });\r\n    }\r\n\r\n    cryptoProvider = cryptoProvider || getNodeCryptoProvider();\r\n    const expectedSignature = cryptoProvider.computeHMACSignature(\r\n      `${details.timestamp}.${payload}`,\r\n      secret\r\n    );\r\n\r\n    const signatureFound = !!details.signatures.filter(\r\n      utils.secureCompare.bind(utils, expectedSignature)\r\n    ).length;\r\n\r\n    if (!signatureFound) {\r\n      throw new StripeSignatureVerificationError({\r\n        message:\r\n          'No signatures found matching the expected signature for payload.' +\r\n          ' Are you passing the raw request body you received from Stripe?' +\r\n          ' https://github.com/stripe/stripe-node#webhook-signing',\r\n        detail: {\r\n          header,\r\n          payload,\r\n        },\r\n      });\r\n    }\r\n\r\n    const timestampAge = Math.floor(Date.now() / 1000) - details.timestamp;\r\n\r\n    if (tolerance > 0 && timestampAge > tolerance) {\r\n      throw new StripeSignatureVerificationError({\r\n        message: 'Timestamp outside the tolerance zone',\r\n        detail: {\r\n          header,\r\n          payload,\r\n        },\r\n      });\r\n    }\r\n\r\n    return true;\r\n  },\r\n};\r\n\r\nfunction parseHeader(header, scheme) {\r\n  if (typeof header !== 'string') {\r\n    return null;\r\n  }\r\n\r\n  return header.split(',').reduce(\r\n    (accum, item) => {\r\n      const kv = item.split('=');\r\n\r\n      if (kv[0] === 't') {\r\n        accum.timestamp = kv[1];\r\n      }\r\n\r\n      if (kv[0] === scheme) {\r\n        accum.signatures.push(kv[1]);\r\n      }\r\n\r\n      return accum;\r\n    },\r\n    {\r\n      timestamp: -1,\r\n      signatures: [],\r\n    }\r\n  );\r\n}\r\n\r\nlet webhooksNodeCryptoProviderInstance = null;\r\n\r\n/**\r\n * Lazily instantiate a NodeCryptoProvider instance. This is a stateless object\r\n * so a singleton can be used here.\r\n */\r\nfunction getNodeCryptoProvider() {\r\n  if (!webhooksNodeCryptoProviderInstance) {\r\n    const NodeCryptoProvider = require('./crypto/NodeCryptoProvider');\r\n    webhooksNodeCryptoProviderInstance = new NodeCryptoProvider();\r\n  }\r\n  return webhooksNodeCryptoProviderInstance;\r\n}\r\n\r\nWebhook.signature = signature;\r\n\r\nmodule.exports = Webhook;\r\n"]},"metadata":{},"sourceType":"script"}