{"ast":null,"code":"'use strict';\n\nconst utils = require('./utils');\n\nconst makeRequest = require('./makeRequest');\n\nconst makeAutoPaginationMethods = require('./autoPagination').makeAutoPaginationMethods;\n/**\r\n * Create an API method from the declared spec.\r\n *\r\n * @param [spec.method='GET'] Request Method (POST, GET, DELETE, PUT)\r\n * @param [spec.path=''] Path to be appended to the API BASE_PATH, joined with\r\n *  the instance's path (e.g. 'charges' or 'customers')\r\n * @param [spec.fullPath=''] Fully qualified path to the method (eg. /v1/a/b/c).\r\n *  If this is specified, path should not be specified.\r\n * @param [spec.urlParams=[]] Array of required arguments in the order that they\r\n *  must be passed by the consumer of the API. Subsequent optional arguments are\r\n *  optionally passed through a hash (Object) as the penultimate argument\r\n *  (preceding the also-optional callback argument\r\n * @param [spec.encode] Function for mutating input parameters to a method.\r\n *  Usefully for applying transforms to data on a per-method basis.\r\n * @param [spec.host] Hostname for the request.\r\n */\n\n\nfunction stripeMethod(spec) {\n  if (spec.path !== undefined && spec.fullPath !== undefined) {\n    throw new Error(`Method spec specified both a 'path' (${spec.path}) and a 'fullPath' (${spec.fullPath}).`);\n  }\n\n  return function (...args) {\n    const callback = typeof args[args.length - 1] == 'function' && args.pop();\n    spec.urlParams = utils.extractUrlParams(spec.fullPath || this.createResourcePathWithSymbols(spec.path || ''));\n    const requestPromise = utils.callbackifyPromiseWithTimeout(makeRequest(this, args, spec, {}), callback); // Please note `spec.methodType === 'search'` is beta functionality and this\n    // interface is subject to change/removal at any time.\n\n    if (spec.methodType === 'list' || spec.methodType === 'search') {\n      const autoPaginationMethods = makeAutoPaginationMethods(this, args, spec, requestPromise);\n      Object.assign(requestPromise, autoPaginationMethods);\n    }\n\n    return requestPromise;\n  };\n}\n\nmodule.exports = stripeMethod;","map":{"version":3,"sources":["D:/Abid/checkout-task/frontend/node_modules/stripe/lib/StripeMethod.js"],"names":["utils","require","makeRequest","makeAutoPaginationMethods","stripeMethod","spec","path","undefined","fullPath","Error","args","callback","length","pop","urlParams","extractUrlParams","createResourcePathWithSymbols","requestPromise","callbackifyPromiseWithTimeout","methodType","autoPaginationMethods","Object","assign","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,SAAD,CAArB;;AACA,MAAMC,WAAW,GAAGD,OAAO,CAAC,eAAD,CAA3B;;AACA,MAAME,yBAAyB,GAAGF,OAAO,CAAC,kBAAD,CAAP,CAC/BE,yBADH;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,YAAT,CAAsBC,IAAtB,EAA4B;AAC1B,MAAIA,IAAI,CAACC,IAAL,KAAcC,SAAd,IAA2BF,IAAI,CAACG,QAAL,KAAkBD,SAAjD,EAA4D;AAC1D,UAAM,IAAIE,KAAJ,CACH,wCAAuCJ,IAAI,CAACC,IAAK,uBAAsBD,IAAI,CAACG,QAAS,IADlF,CAAN;AAGD;;AACD,SAAO,UAAS,GAAGE,IAAZ,EAAkB;AACvB,UAAMC,QAAQ,GAAG,OAAOD,IAAI,CAACA,IAAI,CAACE,MAAL,GAAc,CAAf,CAAX,IAAgC,UAAhC,IAA8CF,IAAI,CAACG,GAAL,EAA/D;AAEAR,IAAAA,IAAI,CAACS,SAAL,GAAiBd,KAAK,CAACe,gBAAN,CACfV,IAAI,CAACG,QAAL,IAAiB,KAAKQ,6BAAL,CAAmCX,IAAI,CAACC,IAAL,IAAa,EAAhD,CADF,CAAjB;AAIA,UAAMW,cAAc,GAAGjB,KAAK,CAACkB,6BAAN,CACrBhB,WAAW,CAAC,IAAD,EAAOQ,IAAP,EAAaL,IAAb,EAAmB,EAAnB,CADU,EAErBM,QAFqB,CAAvB,CAPuB,CAYvB;AACA;;AACA,QAAIN,IAAI,CAACc,UAAL,KAAoB,MAApB,IAA8Bd,IAAI,CAACc,UAAL,KAAoB,QAAtD,EAAgE;AAC9D,YAAMC,qBAAqB,GAAGjB,yBAAyB,CACrD,IADqD,EAErDO,IAFqD,EAGrDL,IAHqD,EAIrDY,cAJqD,CAAvD;AAMAI,MAAAA,MAAM,CAACC,MAAP,CAAcL,cAAd,EAA8BG,qBAA9B;AACD;;AAED,WAAOH,cAAP;AACD,GAzBD;AA0BD;;AAEDM,MAAM,CAACC,OAAP,GAAiBpB,YAAjB","sourcesContent":["'use strict';\r\n\r\nconst utils = require('./utils');\r\nconst makeRequest = require('./makeRequest');\r\nconst makeAutoPaginationMethods = require('./autoPagination')\r\n  .makeAutoPaginationMethods;\r\n\r\n/**\r\n * Create an API method from the declared spec.\r\n *\r\n * @param [spec.method='GET'] Request Method (POST, GET, DELETE, PUT)\r\n * @param [spec.path=''] Path to be appended to the API BASE_PATH, joined with\r\n *  the instance's path (e.g. 'charges' or 'customers')\r\n * @param [spec.fullPath=''] Fully qualified path to the method (eg. /v1/a/b/c).\r\n *  If this is specified, path should not be specified.\r\n * @param [spec.urlParams=[]] Array of required arguments in the order that they\r\n *  must be passed by the consumer of the API. Subsequent optional arguments are\r\n *  optionally passed through a hash (Object) as the penultimate argument\r\n *  (preceding the also-optional callback argument\r\n * @param [spec.encode] Function for mutating input parameters to a method.\r\n *  Usefully for applying transforms to data on a per-method basis.\r\n * @param [spec.host] Hostname for the request.\r\n */\r\nfunction stripeMethod(spec) {\r\n  if (spec.path !== undefined && spec.fullPath !== undefined) {\r\n    throw new Error(\r\n      `Method spec specified both a 'path' (${spec.path}) and a 'fullPath' (${spec.fullPath}).`\r\n    );\r\n  }\r\n  return function(...args) {\r\n    const callback = typeof args[args.length - 1] == 'function' && args.pop();\r\n\r\n    spec.urlParams = utils.extractUrlParams(\r\n      spec.fullPath || this.createResourcePathWithSymbols(spec.path || '')\r\n    );\r\n\r\n    const requestPromise = utils.callbackifyPromiseWithTimeout(\r\n      makeRequest(this, args, spec, {}),\r\n      callback\r\n    );\r\n\r\n    // Please note `spec.methodType === 'search'` is beta functionality and this\r\n    // interface is subject to change/removal at any time.\r\n    if (spec.methodType === 'list' || spec.methodType === 'search') {\r\n      const autoPaginationMethods = makeAutoPaginationMethods(\r\n        this,\r\n        args,\r\n        spec,\r\n        requestPromise\r\n      );\r\n      Object.assign(requestPromise, autoPaginationMethods);\r\n    }\r\n\r\n    return requestPromise;\r\n  };\r\n}\r\n\r\nmodule.exports = stripeMethod;\r\n"]},"metadata":{},"sourceType":"script"}